/* -------------------------
 *  Title: C Calculator Design
 * -------------------------
 * Purpose:
 * This program takes the inputs from a keypad and acts like a calculator
 * according to the inputs, first it takes in a digit between 1-9, then takes an
 * operation addition, subtraction, multiplication or division, it then takes in
 * another digit between 1-9 and only outputs the result when the '#' key is
 * pressed. The result is then displayed on the LEDs.
 * Dependencies: calculatorHead.h
 * Compiler: MPLAB X IDE v6.20: XC8 (v2.46)
 * Author: Alex Juarez
 * Outputs: PORTD PORTB0, PORTB1, PORTB2, PORTB5
 * Inputs: PORTB3, PORTB4, PORTB6, PORTB7
 * Versions:
 *  V1.0: 04/06/2024 - First version
 */


#include <xc.h>
#include "calculatorHead.h"

#define _XTAL_FREQ 4000000
#define FCY     _XTAL_FREQ/4


void MSDelay(unsigned int, unsigned int);
int OpCheck (int);
int Input (int);
int Addition_OP(int, int);
int Subtraction_OP(int, int);
int Multiplication_OP(int, int);
int Division_OP(int, int);


char Operation_REG;
int X_Input_REG;
int Y_Input_REG;
int Display_Result_REG;
int Count;

void main(void) {
    PORTD = 0; LATD = 0; ANSELD = 0; TRISD = 0;     //Initialize PORTD
    //Set all bits in PORTD as outputs
    
    PORTB = 0; LATB = 0; ANSELB = 0; TRISB = 216;   //Initialize PORTB
    //Set bits [7,6,4,3] in PORTB as inputs 0b11011000
    
    Count = 0;
    X_Input_REG = 0;
    Y_Input_REG = 0;
    Operation_REG = 0;
    Display_Result_REG = 0;

    
    while(1){
        
        //Function to check for X Input for keypad input
        if (PORTD == 0){
            X_Input_REG = Input(X_Input_REG);
            if (X_Input_REG > 0){
                PORTD = 1;
                MSDelay(100,200);
            }
        }
        
        if (PORTD > 0){
            PORTBbits.RB1 = 1;
            if (PORTBbits.RB6 == 1)
            {
                PORTD = 0;
                X_Input_REG = 0;
                Y_Input_REG = 0;
                Operation_REG = 0;
            }
            PORTBbits.RB1 = 0;
        }
        
        
        //Function to check for operation input on keypad
        if (PORTD == 1){
            Operation_REG = OpCheck(Operation_REG);
            Count = Operation_REG; 
        }
        
        if (Count > 0){
            PORTD = 3;
            Count = 0;
            MSDelay(100,200);
        }
        
        //Function to check for Y Input for keypad input
        if (PORTD == 3){
            Y_Input_REG = Input(Y_Input_REG);
            if (Y_Input_REG > 0){
                PORTD = 2;
                MSDelay(200,200);
            }
        
            
            // Checks to reset the calculator 
            if (PORTD > 0){
                PORTBbits.RB1 = 1;
                if (PORTBbits.RB6 == 1){
                    PORTD = 0;
                    X_Input_REG = 0;
                    Y_Input_REG = 0;
                    Operation_REG = 0;
                }
                PORTBbits.RB1 = 0;
            }
        }
        
        
        // Compute the operation using the X_Input and Y_Input values
        if (PORTD == 2){
        
            if (Operation_REG == 1){

                Display_Result_REG = Addition_OP(X_Input_REG, Y_Input_REG);
            }
            else if (Operation_REG == 2){

                Display_Result_REG = Subtraction_OP(X_Input_REG, Y_Input_REG);
            }
            else if (Operation_REG == 3){

                Display_Result_REG = Multiplication_OP(X_Input_REG, Y_Input_REG);
            }
            else if (Operation_REG == 4){

                Display_Result_REG = Division_OP(X_Input_REG, Y_Input_REG);
            }
            
            if (PORTD == 2){
                PORTBbits.RB2 = 1;
                if (PORTBbits.RB6 == 1){
                    PORTD = Display_Result_REG;
                    MSDelay(200,200);
                }
                PORTBbits.RB2 = 0;
            }
        }
        
        
        // Checks to reset the calculator
        if (PORTD == 2)
        {
            PORTBbits.RB1 = 1;
            if (PORTBbits.RB6 == 1){
                PORTD = 0;
                Y_Input_REG = 0;
                X_Input_REG = 0;
                Operation_REG = 0;
            }
            PORTBbits.RB1 = 0;
        }
    }
        
        
} 


// Delay function
void MSDelay(unsigned int itime1, unsigned int itime2)
{
    
    unsigned int i; unsigned int j;
    for (i = 0; i <itime1 ;  i++)
        for (j = 0 ; j<itime2 ; j++);
}    

// Operation check function
int OpCheck(int Z1){
    Z1 = 0;
    if (Z1 == 0){
        PORTBbits.RB5 = 1;
        if (PORTBbits.RB3 == 1)
            Z1 = 1;
        if (PORTBbits.RB4 == 1)
            Z1 = 2;
        if (PORTBbits.RB7 == 1)
            Z1 = 3;
        if (PORTBbits.RB6 == 1)
            Z1 = 4;
        PORTBbits.RB5 = 0;
    }
    return Z1;
}


// Input check function
int Input(int Z2){
    Z2 = 0;
    if (Z2 == 0){
        PORTBbits.RB0 = 1;
        if (PORTBbits.RB3 == 1)
            Z2 = 1;
        else if (PORTBbits.RB4 == 1)
            Z2 = 4;
        else if (PORTBbits.RB7 == 1)
            Z2 = 7;
        PORTBbits.RB0 = 0;
        }
        
    if (Z2 == 0){
        PORTBbits.RB1 = 1;
        if (PORTBbits.RB3 == 1)
            Z2 = 2;
        else if (PORTBbits.RB4 == 1)
            Z2 = 5;
        else if (PORTBbits.RB7 == 1)
            Z2 = 8;
        PORTBbits.RB1 = 0;
        }
        
    if (Z2 == 0){
        PORTBbits.RB2 = 1;
        if (PORTBbits.RB3 == 1)
            Z2 = 3;
        else if (PORTBbits.RB4 == 1)
            Z2 = 6;
        else if (PORTBbits.RB7 == 1)
            Z2 = 9;
        PORTBbits.RB2 = 0;
        }
    return Z2;
}


// Addition Function
int Addition_OP (int X1, int Y1)
{
    int ADD;
    ADD = X1 + Y1;
    return ADD;
}


// Subtraction Function
int Subtraction_OP (int X2, int Y2)
{
    int SUB;
    SUB = X2 - Y2;
    return SUB;
}


// Multiplication Function
int Multiplication_OP (int X3, int Y3)
{
    int MUL;
    MUL = X3 * Y3;
    return MUL;
}


// Division Function
int Division_OP (int X4, int Y4)
{
    int DIV;
    DIV = X4 / Y4;
    return DIV;
}
