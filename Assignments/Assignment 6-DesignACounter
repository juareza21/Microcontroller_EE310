;-------------------------
; Title: Counter
;-------------------------
; Purpose:
; This program takes checks for two switches, switch A and switch B, and changes
; the 7-segment display accordingly to which switch is pressed. When switch A is
; pressed, the number displayed counts up, when switch B is pressed, the display
; counts down, when both are pressed the counter resets to zero. When none are
; pressed, then the counter doesn't change.
; Dependencies: CounterConfigFile.inc
; Compiler: MPLAB X IDE v6.20: pic-as (v2.46)
; Author: Alex Juarez
; OUTPUTS: PORTD
; INPUTS: PORTB1, PORTB0
; Version:
;   V1.0: 03/22/2024 - First version
;   V2.0: 03/26/2024 - Second version: Switched from using Table Pointers instead of FSR
;   V3.0: 03/27/2024 - Third version: Switched back to FSR and use PREINC instead of POSTINC
;   as well as making the delay longer.
;-------------------------


;-------------------------
;   Initialization
;-------------------------
#include "./CounterConfigFile.inc"
#include <xc.inc>
    
;-------------------------
; Program Inputs
;------------------------- 
    dloop	EQU	5	;set dloop to 5
    Inner_loop	EQU	200	;set Inner_loop to 200
    Outer_loop  EQU	200	;set Outer_loop to 200
    what_button	EQU	20H

	
;-------------------------
; Main Program
;-------------------------
	
    PSECT absdata,abs,ovrld
    
    ORG		0
    GOTO	_setup
    
    ORG		20H
    
;--------Setup RAM 
_setup:
    MOVLW   0x3F
    MOVWF   0xA0
    MOVLW   0x06
    MOVWF   0xA1
    MOVLW   0x5B
    MOVWF   0xA2
    MOVLW   0x4F
    MOVWF   0xA3
    MOVLW   0x66
    MOVWF   0xA4
    MOVLW   0x6D
    MOVWF   0xA5
    MOVLW   0x7D
    MOVWF   0xA6
    MOVLW   0x07
    MOVWF   0xA7
    MOVLW   0x7F
    MOVWF   0xA8
    MOVLW   0x6F
    MOVWF   0xA9
    MOVLW   0x77
    MOVWF   0xAA
    MOVLW   0x7C
    MOVWF   0xAB
    MOVLW   0x39
    MOVWF   0xAC
    MOVLW   0x5E
    MOVWF   0xAD
    MOVLW   0x79
    MOVWF   0xAE
    MOVLW   0x71
    MOVWF   0xAF
    
    clrf    what_button
    clrf    WREG
    RCALL   _setupPortD
    RCALL   _setupPortB
    clrf    PORTB
    
    CLRF    FSR0H
    CLRF    FSR0L
    
    LFSR    0, 0xA0
    MOVFF   INDF0, PORTD
    
_main:
    RCALL   _check_switch
    TSTFSZ  0x23	;check if switch A and B are cleared
    GOTO    _check23
    
_thedelay:
    CLRF    FSR1H
    CLRF    FSR1L
    GOTO    CLR_LP1

_check23:
    BTFSS   0x23, 1	; check if switch B is set
    GOTO    _theinccount
    BTFSS   0x23, 0	; check if switch A is set
    GOTO    _thedeccount
    GOTO    _zerocount
    
CLR_LP1:
    CALL    _loopDelay
    SETF    POSTINC1
    MOVLW   0x0F
    SUBWF   FSR1H, W
    BTFSC   FSR1L, 4
    BRA	    CLR_LP1
    
    GOTO    _main
    
    
_thedeccount:

    MOVFF   POSTDEC0, PORTD
    BTFSS   FSR0, 5
    LFSR    0, 0xAF
    GOTO    _thedelay
    
_theinccount:

    MOVFF   PREINC0, PORTD
    BTFSC   FSR0, 4
    LFSR    0, 0xA0
    MOVFF   INDF0, PORTD
    GOTO    _thedelay
    
_zerocount:
    LFSR    0, 0xA0
    MOVFF   INDF0, PORTD
    GOTO    _thedelay
    
_setupPortD:
    BANKSEL	PORTD ;
    CLRF	PORTD ;Init PORTA
    BANKSEL	LATD ;Data Latch
    CLRF	LATD ;
    BANKSEL	ANSELD ;
    CLRF	ANSELD ;digital I/O
    BANKSEL	TRISD ;
    MOVLW	0b00000000 ;Set RD[7:1] as outputs
    MOVWF	TRISD ;and set RD0 as ouput
    RETURN

_setupPortB:
    BANKSEL	PORTB ;
    CLRF	PORTB ;Init PORTB
    BANKSEL	LATB ;Data Latch
    CLRF	LATB ;
    BANKSEL	ANSELB ;
    CLRF	ANSELB ;digital I/O
    BANKSEL	TRISB ;
    MOVLW	0b11111111 ;
    MOVWF	TRISB ;
    RETURN
    
;--------Delay subroutine
_loopDelay:
    MOVLW   Inner_loop	    ;Initialize Inner and Outer loop
    MOVWF   0x21
    MOVLW   Outer_loop
    MOVWF   0x22
    MOVLW   dloop
    MOVWF   0x24
_loop1:
    DECF    0x21, 1
    BNZ	    _loop1
    MOVLW   Inner_loop	    ;Re-initialization of the Innerloop everytime the outer loop decrements
    MOVWF   0x21
    DECF    0x22, 1
    BNZ	    _loop1
    MOVLW   Inner_loop
    MOVWF   0x21
    MOVLW   Outer_loop
    MOVWF   0x22
    DECF    0x24, 1
    BNZ	    _loop1
    RETURN  1
    
    
_check_switch:
    clrf     0x23			; clears register 23
    clrf    WREG			; clears WREG
    
    BTFSC   PORTB, 0			; checks if switch A has been pressed
    MOVLW   1				; moves 00000001 into register 23, 
    MOVWF   0x23
    clrf    WREG
    
    BTFSC PORTB, 1			; checks if switch B has been pressed
    MOVLW 2				; adds 00000010 to register 23 and keeps it in 23
    ADDWF   0x23, 1

return						

    END
